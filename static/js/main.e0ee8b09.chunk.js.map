{"version":3,"sources":["components/Header/Header.tsx","views/About/index.tsx","containers/AboutContainer.tsx","components/Button/Button.tsx","views/Home/index.tsx","redux_folder/constants/hours.constants.ts","redux_folder/actions/hours.actions.ts","hooks/useTypedSelector.ts","containers/HomeContainer.tsx","App.tsx","reportWebVitals.ts","redux_folder/reducers/hours.reducer.ts","redux_folder/reducers/index.ts","services/api.ts","services/hours.services.ts","redux_folder/sagas/hours.sagas.ts","redux_folder/sagas/index.ts","redux_folder/store/index.ts","index.tsx"],"names":["Header","className","AboutView","to","AboutContainer","About","Button","props","text","onClick","HomeView","onGetHours","HOURS_ON_GET_ALL_REQUESTED","HOURS_ON_GET_ALL_SUCCEEDED","HOURS_ON_GET_ALL_FAILED","onGetAllSucceeded","data","type","constants","useTypedSelector","useSelector","HomeContainer","dispatch","useDispatch","hours","state","console","log","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","loading","hoursReducer","action","rootReducer","combineReducers","api","axios","create","getOptions","a","options","headers","errorResponse","error","response","message","Error","get","url","getToken","getHours","hoursGetAll","watchHours","call","put","actions","all","takeLatest","rootSaga","sagaMiddleware","createSagaMiddleware","loggerMiddleware","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0ee8b09.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Header.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"Header\"> \n            <h1 className=\"Title\">Psa-Tasks</h1>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst AboutView = () => {\n    return (\n        <>\n      <main>\n        <h2>Who are we?</h2>\n        <p>\n          That feels like an existential question, don't you\n          think?\n        </p>\n      </main>\n      <nav>\n        <Link to=\"/\">Home</Link>\n      </nav>\n    </>\n    )\n}\n\nexport default AboutView;\n","import React from 'react'\nimport AboutView from 'views/About'\n\n\nconst AboutContainer = () => {\n    return (\n        <AboutView/>\n    )\n}\n\nexport default AboutContainer\n","import React from 'react'\n\nconst Button = (props:any) => {\n    const {text, onClick} = props;\n    return (\n        <button onClick={onClick} className=\"Button\">{text}</button>\n    )\n}\n\nexport default Button\n","import React from 'react'\nimport {Link} from \"react-router-dom\";\nimport Button from 'components/Button/Button';\nimport './index.css'\n\nconst HomeView = (props: any) => {\n  const {onGetHours} = props;\n\n  return (\n    <>\n      <main>\n        <h2>Welcome to the homepage!</h2>\n      </main>\n      <Button onClick={onGetHours} text={\"Get Hours\"}/>\n      <nav>\n        <Link to=\"/about\">About</Link>\n      </nav>\n    </>\n    )\n}\n\nexport default HomeView;\n","export const HOURS_ON_GET_ALL_REQUESTED = 'HOURS_ON_GET_ALL_REQUESTED';\nexport const HOURS_ON_GET_ALL_SUCCEEDED = 'HOURS_ON_GET_ALL_SUCCEEDED';\nexport const HOURS_ON_GET_ALL_FAILED = 'HOURS_ON_GET_ALL_FAILED';\n","import * as constants from 'redux_folder/constants/hours.constants';\nimport {AnyAction} from 'redux'\n\n// HOURS_ON_GET_ALL\nexport const onHoursGetAll = ():  AnyAction => (\n  { type: constants.HOURS_ON_GET_ALL_REQUESTED});\n\nexport const onGetAllSucceeded = (data: any): AnyAction => (\n  { type: constants.HOURS_ON_GET_ALL_SUCCEEDED, data });\n\nexport const onGetAllFailed = (error: unknown): AnyAction => (\n  { type: constants.HOURS_ON_GET_ALL_FAILED, error });\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { IHoursDefaultState } from 'types/hours.types';\n\ninterface IRootState {\n  hours: IHoursDefaultState;\n}\n\nconst useTypedSelector: TypedUseSelectorHook<IRootState> = useSelector;\n\nexport default useTypedSelector;\n","import React from 'react'\nimport HomeView from 'views/Home'\nimport {useDispatch} from 'react-redux'\nimport { onHoursGetAll } from 'redux_folder/actions/hours.actions';\nimport useTypedSelector from 'hooks/useTypedSelector';\n\nconst HomeContainer = () => {\n    \n    \n    const dispatch = useDispatch();\n\n    const hours = useTypedSelector((state) => state.hours.hours)\n    console.log(hours)\n\n    const onGetHours = () => {\n        dispatch(onHoursGetAll());\n        console.log(\"click\")\n    }\n    return (\n        <HomeView onGetHours={onGetHours}/>\n    )\n}\n\nexport default HomeContainer\n","import Header from 'components/Header/Header';\nimport AboutContainer from 'containers/AboutContainer';\nimport HomeContainer from 'containers/HomeContainer';\nimport React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n        <div className=\"App\">\n          <Header/>\n          <Routes>\n            <Route path=\"/\" element={<HomeContainer />}/>\n          < Route path=\"/about\" element={<AboutContainer />} />\n          </Routes>\n        </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Reducer } from 'redux';\nimport * as constants from 'redux_folder/constants/hours.constants';\nimport { IHoursDefaultState } from 'types/hours.types';\n\nconst defaultState: IHoursDefaultState = {\n  loading: false,\n  hours: [],\n};\n\n// eslint-disable-next-line default-param-last\nconst hoursReducer: Reducer = (state = defaultState, action) => {\n  const { data, type } = action;\n  switch (type) {\n    case constants.HOURS_ON_GET_ALL_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n        hours: [],\n      };\n    case constants.HOURS_ON_GET_ALL_SUCCEEDED:\n      return {\n        ...state,\n        loading: false,\n        hours: data.data.hours,\n      }\n    case constants.HOURS_ON_GET_ALL_FAILED:\n      return {\n        ...state,\n        loading:false,\n        hours:[],\n      }\n    default:\n      return state;\n  }\n};\n\nexport default hoursReducer;\n","import { combineReducers } from 'redux';\n\nimport hoursReducer from 'redux_folder/reducers/hours.reducer';\n\nconst rootReducer = combineReducers({\n  hours: hoursReducer,\n});\n\nexport default rootReducer;\n","import axios, { AxiosResponse } from 'axios';\n\n\nconst api = axios.create();\n\nasync function getOptions() {\n  const options = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  return options;\n}\n\nfunction errorResponse(error: any) {\n  const { response } = error;\n  let message = error;\n  if (response) {\n    const { data } = response;\n    message = data.message;\n  }\n  return new Error(message);\n}\n\nexport async function get(url: string, headers = {}): Promise<AxiosResponse> {\n  try {\n    const getToken = await getOptions();\n    const options = { ...getToken, ...headers };\n    const response = await api.get(url, options);\n    return response;\n  } catch (error: any) {\n    throw errorResponse(error);\n  }\n}\n\nexport async function post(url: string, params = {}, headers = {}): Promise<any> {\n  try {\n    const getToken = await getOptions();\n    const options = { ...getToken, ...headers };\n    const response = await api.post(url, params, options);\n    return response;\n  } catch (error: any) {\n    throw errorResponse(error);\n  }\n}\n\nexport async function put(url: string, params = {}, headers = {}): Promise<any> {\n  try {\n    const getToken = await getOptions();\n    const options = { ...getToken, ...headers };\n    const { data } = await api.put(url, params, options);\n    return data;\n  } catch (error) {\n    throw errorResponse(error);\n  }\n}\n\nexport async function patch(url: string, params = {}, headers = {}): Promise<any> {\n  try {\n    const getToken = await getOptions();\n    const options = { ...getToken, ...headers };\n    const { data } = await api.patch(url, params, options);\n    return data;\n  } catch (error) {\n    throw errorResponse(error);\n  }\n}\n","import { get } from 'services/api';\n\nconst url = 'https://psa-tribu2-recursos.herokuapp.com'\n\nexport async function getHours(): Promise<any> {\n  const response = await get(`${url}/hours`);\n  return response;\n}\n\n","import {\n  all, call, put, takeLatest,\n} from 'redux-saga/effects';\n\nimport * as constants from 'redux_folder/constants/hours.constants';\nimport * as actions from 'redux_folder/actions/hours.actions';\n\nimport { getHours } from 'services/hours.services';\n\nexport function* hoursGetAll() {\n  try {\n    const data: unknown = yield call(getHours);\n    yield put(actions.onGetAllSucceeded(data));\n  } catch (error) {\n    yield put(actions.onGetAllFailed(error));\n  }\n}\n\n\nexport function* watchHours() {\n  yield all([\n    takeLatest(constants.HOURS_ON_GET_ALL_REQUESTED, hoursGetAll),\n  ]);\n}\n","import { all } from 'redux-saga/effects';\n\nimport { watchHours } from './hours.sagas';\n\nexport default function* rootSaga(): Generator {\n  yield all([watchHours()]);\n}\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createLogger } from 'redux-logger';\n\nimport reducers from 'redux_folder/reducers';\nimport rootSaga from 'redux_folder/sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst loggerMiddleware = createLogger();\n\nexport const composeEnhancers =\n  (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\nconst store = createStore(\n  reducers,\n  /* preloadedState, */\n  composeEnhancers(\n    applyMiddleware(\n      sagaMiddleware,\n      loggerMiddleware,\n    ),\n  ),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from 'redux_folder/store';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}