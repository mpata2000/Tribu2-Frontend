{"version":3,"sources":["components/Header/Header.tsx","views/About/index.tsx","containers/AboutContainer.tsx","components/Button/Button.tsx","views/Home/index.tsx","redux_folder/constants/hours.constants.ts","redux_folder/actions/hours.actions.ts","hooks/useTypedSelector.ts","containers/HomeContainer.tsx","App.tsx","reportWebVitals.ts","redux_folder/reducers/hours.reducer.ts","redux_folder/reducers/index.ts","services/api.ts","services/hours.services.ts","redux_folder/sagas/hours.sagas.ts","redux_folder/sagas/index.ts","redux_folder/store/index.ts","index.tsx"],"names":["Header","className","AboutView","to","AboutContainer","About","Button","props","text","onClick","HomeView","onGetHours","HOURS_ON_GET_ALL_REQUESTED","HOURS_ON_GET_ALL_SUCCEEDED","HOURS_ON_GET_ALL_FAILED","onGetAllSucceeded","data","type","constants","useTypedSelector","useSelector","HomeContainer","dispatch","useDispatch","hours","state","console","log","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","loading","hoursReducer","action","rootReducer","combineReducers","api","axios","create","getOptions","a","options","headers","errorResponse","error","response","message","Error","get","url","getToken","getHours","hoursGetAll","watchHours","call","put","actions","all","takeLatest","rootSaga","sagaMiddleware","createSagaMiddleware","loggerMiddleware","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f225b37.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"Header\"> \r\n            <h1 className=\"Title\">Psa-Tasks</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst AboutView = () => {\r\n    return (\r\n        <>\r\n      <main>\r\n        <h2>Who are we?</h2>\r\n        <p>\r\n          That feels like an existential question, don't you\r\n          think?\r\n        </p>\r\n      </main>\r\n      <nav>\r\n        <Link to=\"/\">Home</Link>\r\n      </nav>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default AboutView;\r\n","import React from 'react'\r\nimport AboutView from 'views/About'\r\n\r\n\r\nconst AboutContainer = () => {\r\n    return (\r\n        <AboutView/>\r\n    )\r\n}\r\n\r\nexport default AboutContainer\r\n","import React from 'react'\r\n\r\nconst Button = (props:any) => {\r\n    const {text, onClick} = props;\r\n    return (\r\n        <button onClick={onClick} className=\"Button\">{text}</button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport Button from 'components/Button/Button';\r\nimport './index.css'\r\n\r\nconst HomeView = (props: any) => {\r\n  const {onGetHours} = props;\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        <h2>Welcome to the homepage!</h2>\r\n      </main>\r\n      <Button onClick={onGetHours} text={\"Get Hours\"}/>\r\n      <nav>\r\n        <Link to=\"/about\">About</Link>\r\n      </nav>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default HomeView;\r\n","export const HOURS_ON_GET_ALL_REQUESTED = 'HOURS_ON_GET_ALL_REQUESTED';\r\nexport const HOURS_ON_GET_ALL_SUCCEEDED = 'HOURS_ON_GET_ALL_SUCCEEDED';\r\nexport const HOURS_ON_GET_ALL_FAILED = 'HOURS_ON_GET_ALL_FAILED';\r\n","import * as constants from 'redux_folder/constants/hours.constants';\r\nimport {AnyAction} from 'redux'\r\n\r\n// HOURS_ON_GET_ALL\r\nexport const onHoursGetAll = ():  AnyAction => (\r\n  { type: constants.HOURS_ON_GET_ALL_REQUESTED});\r\n\r\nexport const onGetAllSucceeded = (data: any): AnyAction => (\r\n  { type: constants.HOURS_ON_GET_ALL_SUCCEEDED, data });\r\n\r\nexport const onGetAllFailed = (error: unknown): AnyAction => (\r\n  { type: constants.HOURS_ON_GET_ALL_FAILED, error });\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { IHoursDefaultState } from 'types/hours.types';\r\n\r\ninterface IRootState {\r\n  hours: IHoursDefaultState;\r\n}\r\n\r\nconst useTypedSelector: TypedUseSelectorHook<IRootState> = useSelector;\r\n\r\nexport default useTypedSelector;\r\n","import React from 'react'\r\nimport HomeView from 'views/Home'\r\nimport {useDispatch} from 'react-redux'\r\nimport { onHoursGetAll } from 'redux_folder/actions/hours.actions';\r\nimport useTypedSelector from 'hooks/useTypedSelector';\r\n\r\nconst HomeContainer = () => {\r\n    \r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const hours = useTypedSelector((state) => state.hours.hours)\r\n    console.log(hours)\r\n\r\n    const onGetHours = () => {\r\n        dispatch(onHoursGetAll());\r\n        console.log(\"click\")\r\n    }\r\n    return (\r\n        <HomeView onGetHours={onGetHours}/>\r\n    )\r\n}\r\n\r\nexport default HomeContainer\r\n","import Header from 'components/Header/Header';\r\nimport AboutContainer from 'containers/AboutContainer';\r\nimport HomeContainer from 'containers/HomeContainer';\r\nimport React from 'react';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n        <div className=\"App\">\r\n          <Header/>\r\n          <Routes>\r\n            <Route path=\"/\" element={<HomeContainer />}/>\r\n          < Route path=\"/about\" element={<AboutContainer />} />\r\n          </Routes>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { Reducer } from 'redux';\r\nimport * as constants from 'redux_folder/constants/hours.constants';\r\nimport { IHoursDefaultState } from 'types/hours.types';\r\n\r\nconst defaultState: IHoursDefaultState = {\r\n  loading: false,\r\n  hours: [],\r\n};\r\n\r\n// eslint-disable-next-line default-param-last\r\nconst hoursReducer: Reducer = (state = defaultState, action) => {\r\n  const { data, type } = action;\r\n  switch (type) {\r\n    case constants.HOURS_ON_GET_ALL_REQUESTED:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        hours: [],\r\n      };\r\n    case constants.HOURS_ON_GET_ALL_SUCCEEDED:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        hours: data.data.hours,\r\n      }\r\n    case constants.HOURS_ON_GET_ALL_FAILED:\r\n      return {\r\n        ...state,\r\n        loading:false,\r\n        hours:[],\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default hoursReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport hoursReducer from 'redux_folder/reducers/hours.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  hours: hoursReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import axios, { AxiosResponse } from 'axios';\r\n\r\n\r\nconst api = axios.create();\r\n\r\nasync function getOptions() {\r\n  const options = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n  return options;\r\n}\r\n\r\nfunction errorResponse(error: any) {\r\n  const { response } = error;\r\n  let message = error;\r\n  if (response) {\r\n    const { data } = response;\r\n    message = data.message;\r\n  }\r\n  return new Error(message);\r\n}\r\n\r\nexport async function get(url: string, headers = {}): Promise<AxiosResponse> {\r\n  try {\r\n    const getToken = await getOptions();\r\n    const options = { ...getToken, ...headers };\r\n    const response = await api.get(url, options);\r\n    return response;\r\n  } catch (error: any) {\r\n    throw errorResponse(error);\r\n  }\r\n}\r\n\r\nexport async function post(url: string, params = {}, headers = {}): Promise<any> {\r\n  try {\r\n    const getToken = await getOptions();\r\n    const options = { ...getToken, ...headers };\r\n    const response = await api.post(url, params, options);\r\n    return response;\r\n  } catch (error: any) {\r\n    throw errorResponse(error);\r\n  }\r\n}\r\n\r\nexport async function put(url: string, params = {}, headers = {}): Promise<any> {\r\n  try {\r\n    const getToken = await getOptions();\r\n    const options = { ...getToken, ...headers };\r\n    const { data } = await api.put(url, params, options);\r\n    return data;\r\n  } catch (error) {\r\n    throw errorResponse(error);\r\n  }\r\n}\r\n\r\nexport async function patch(url: string, params = {}, headers = {}): Promise<any> {\r\n  try {\r\n    const getToken = await getOptions();\r\n    const options = { ...getToken, ...headers };\r\n    const { data } = await api.patch(url, params, options);\r\n    return data;\r\n  } catch (error) {\r\n    throw errorResponse(error);\r\n  }\r\n}\r\n","import { get } from 'services/api';\r\n\r\nconst url = 'https://psa-tribu2-recursos.herokuapp.com'\r\n\r\nexport async function getHours(): Promise<any> {\r\n  const response = await get(`${url}/hours`);\r\n  return response;\r\n}\r\n\r\n","import {\r\n  all, call, put, takeLatest,\r\n} from 'redux-saga/effects';\r\n\r\nimport * as constants from 'redux_folder/constants/hours.constants';\r\nimport * as actions from 'redux_folder/actions/hours.actions';\r\n\r\nimport { getHours } from 'services/hours.services';\r\n\r\nexport function* hoursGetAll() {\r\n  try {\r\n    const data: unknown = yield call(getHours);\r\n    yield put(actions.onGetAllSucceeded(data));\r\n  } catch (error) {\r\n    yield put(actions.onGetAllFailed(error));\r\n  }\r\n}\r\n\r\n\r\nexport function* watchHours() {\r\n  yield all([\r\n    takeLatest(constants.HOURS_ON_GET_ALL_REQUESTED, hoursGetAll),\r\n  ]);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\n\r\nimport { watchHours } from './hours.sagas';\r\n\r\nexport default function* rootSaga(): Generator {\r\n  yield all([watchHours()]);\r\n}\r\n","import { applyMiddleware, createStore, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nimport reducers from 'redux_folder/reducers';\r\nimport rootSaga from 'redux_folder/sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport const composeEnhancers =\r\n  (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  /* preloadedState, */\r\n  composeEnhancers(\r\n    applyMiddleware(\r\n      sagaMiddleware,\r\n      loggerMiddleware,\r\n    ),\r\n  ),\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from 'redux_folder/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}